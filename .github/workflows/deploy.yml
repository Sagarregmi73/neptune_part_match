name: CI/CD Deploy to EC2

# Trigger workflow on push to main branch
on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout the repo (optional, if needed on runner)
      - name: Checkout code
        uses: actions/checkout@v4

      # 2️⃣ Set up SSH key for EC2
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      # 3️⃣ Connect to EC2, clone/pull project, build & run Docker
      - name: Deploy Docker on EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          DOCKER_IMAGE: ${{ secrets.DOCKER_IMAGE }}
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa "${EC2_USER}@${EC2_HOST}" "bash -s" << 'EOF'
            set -euo pipefail

            PROJECT_DIR="/home/ec2-user/neptune_part_match"
            CONTAINER_NAME="neptune_app"
            DOCKER_IMAGE="${DOCKER_IMAGE}"

            # Clone if missing
            if [ ! -d "$PROJECT_DIR/.git" ]; then
              git clone https://github.com/Sagarregmi73/neptune_part_match.git "$PROJECT_DIR"
            fi

            cd "$PROJECT_DIR"

            # Pull latest changes
            git fetch origin main
            git reset --hard origin/main

            # Check Dockerfile exists
            if [ ! -f Dockerfile ]; then
              echo "ERROR: Dockerfile not found at $PWD"
              exit 1
            fi

            # Build Docker image
            docker build -t "$DOCKER_IMAGE" .

            # Stop and remove old container if running
            if docker ps -a --format '{{.Names}}' | grep -q "^${CONTAINER_NAME}$"; then
              docker stop "$CONTAINER_NAME" || true
              docker rm "$CONTAINER_NAME" || true
            fi

            # Clean dangling images
            docker image prune -f

            # Run new container
            docker run -d -p 8443:8000 --name "$CONTAINER_NAME" "$DOCKER_IMAGE"
          EOF
