- name: Build and deploy Docker on EC2
  env:
    EC2_HOST: ${{ secrets.EC2_HOST }}
    EC2_USER: ${{ secrets.EC2_USER }}
    DOCKER_IMAGE: ${{ secrets.DOCKER_IMAGE }}
  run: |
    ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa $EC2_USER@$EC2_HOST bash -s << 'EOF'
      set -e  # exit immediately if a command fails

      PROJECT_DIR="/home/ec2-user/neptune_part_match"
      CONTAINER_NAME="neptune_app"
      DOCKER_IMAGE="${DOCKER_IMAGE}"

      echo "Project directory: $PROJECT_DIR"
      echo "Docker image name: $DOCKER_IMAGE"
      echo "Checking if project exists..."

      # Clone repo if missing
      if [ ! -d "$PROJECT_DIR" ]; then
        echo "Cloning repository..."
        git clone https://github.com/Sagarregmi73/neptune_part_match.git "$PROJECT_DIR"
      fi

      cd "$PROJECT_DIR"

      # Ensure repo is clean and updated
      echo "Resetting and pulling latest changes..."
      git reset --hard
      git pull origin main

      # Check if Dockerfile exists
      if [ ! -f "Dockerfile" ]; then
        echo "ERROR: No Dockerfile found in $PROJECT_DIR"
        exit 1
      fi

      # Build Docker image
      echo "Building Docker image: $DOCKER_IMAGE"
      docker build -t "$DOCKER_IMAGE" .

      # Stop and remove old container if running
      if [ "$(docker ps -q -f name=$CONTAINER_NAME)" ]; then
        echo "Stopping old container..."
        docker stop $CONTAINER_NAME
        docker rm $CONTAINER_NAME
      fi

      # Clean up dangling images
      echo "Cleaning up unused images..."
      docker image prune -f

      # Run new container
      echo "Starting new container..."
      docker run -d -p 8443:8000 --name $CONTAINER_NAME $DOCKER_IMAGE
    EOF
